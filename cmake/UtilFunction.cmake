function(ConstructSolutionDirTree currdir my_head_list my_src_list my_include_dirs)
	set(temp_head_list "")
	set(temp_src_list "")
	set(temp_include_dirs "")

	message(STATUS "THE CURRENT DIR IS ${currdir}")

	file(GLOB_RECURSE FOUND_FILES LIST_DIRECTORIES true RELATIVE ${currdir} * )

	message(STATUS "FILES ARE ${FOUND_FILES}")

	foreach(child ${FOUND_FILES})
		set(candidate_dir ${currdir}/${child})
		if(IS_DIRECTORY ${candidate_dir})
			message(STATUS "THE ${candidate_dir} is DIRECTORY")
			file(GLOB header_files "${candidate_dir}/*.h")
			file(GLOB hpp_files "${candidate_dir}/*.hpp")
			file(GLOB src_files "${candidate_dir}/*.cpp")
			file(GLOB src_c_files "${candidate_dir}/*.c")
			list(APPEND header_files ${hpp_files})
			list(APPEND src_files ${src_c_files})
			list(LENGTH header_files n_header_files)
			if(NOT(${n_header_files} EQUAL 0))
				list(APPEND temp_include_dirs ${candidate_dir})
			endif()
			source_group("${child}" FILES ${header_files})
			source_group("${child}" FILES ${src_files})
			list(APPEND temp_head_list ${header_files})
			list(APPEND temp_src_list ${src_files})
			message(STATUS "The header_files is ${header_files}")
			message(STATUS "The src_files is ${src_files}")
		endif()
	endforeach()
	set(${my_head_list} ${temp_head_list} PARENT_SCOPE)
	set(${my_src_list} ${temp_src_list} PARENT_SCOPE)
	set(${my_include_dirs} ${temp_include_dirs} PARENT_SCOPE)
endfunction()